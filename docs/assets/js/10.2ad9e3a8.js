(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{218:function(e,r,t){"use strict";t.r(r);var a=t(0),s=Object(a.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"more-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#more-info","aria-hidden":"true"}},[e._v("#")]),e._v(" ðŸ“œ More info")]),e._v(" "),t("h3",{attrs:{id:"log-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#log-files","aria-hidden":"true"}},[e._v("#")]),e._v(" Log files")]),e._v(" "),t("p",[e._v("Log files are inside "),t("code",[e._v("system/logs")]),e._v(" folder, here you have one log file for every error type, in total, 4 files, "),t("code",[e._v("error.log")]),e._v(", "),t("code",[e._v("warning.log")]),e._v(", "),t("code",[e._v("notice.log")]),e._v(" and "),t("code",[e._v("exception.log")]),e._v(", more info "),t("router-link",{attrs:{to:"/cookbook/ErrorHandler.html"}},[e._v("here")])],1),e._v(" "),t("h3",{attrs:{id:"composer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composer","aria-hidden":"true"}},[e._v("#")]),e._v(" Composer")]),e._v(" "),t("p",[e._v("Composer it's integrated in this framework, you can install this framework via composer, it has composer scripts, and external libraries are included through composer.")]),e._v(" "),t("h3",{attrs:{id:"npm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm","aria-hidden":"true"}},[e._v("#")]),e._v(" NPM")]),e._v(" "),t("p",[e._v("All the frontend resources are in the "),t("code",[e._v("sr/view/www")]),e._v(" folder, and there there is a package.json file from npm, where includes method for parsing the JS code, and other utilities")]),e._v(" "),t("h3",{attrs:{id:"ci"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci","aria-hidden":"true"}},[e._v("#")]),e._v(" CI")]),e._v(" "),t("p",[e._v("This framework it's integrated with github actions, so, in every commit parses the code to check if it follows the standars, more info "),t("router-link",{attrs:{to:"/cookbook/CI-CD.html"}},[e._v("here")])],1),e._v(" "),t("h3",{attrs:{id:"compressed-resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compressed-resources","aria-hidden":"true"}},[e._v("#")]),e._v(" Compressed resources")]),e._v(" "),t("p",[e._v("All the HTML, CSS, JavaScript, Text, XML and fonts resources are compressed (gzip) by default, this is done using the "),t("code",[e._v(".htaccess")]),e._v(" file")]),e._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[e._v("#")]),e._v(" Cache control")]),e._v(" "),t("p",[e._v("You can define a version number for the "),t("code",[e._v("JS/CSS")]),e._v(" resources, so, every time you make an update you just change the cache number, and the user's browser will make a fresh download of these resources.\n(Basically, all the resources ends with "),t("code",[e._v("?v={%cache_number}")]),e._v(", changing this number makes the browser think it needs to download a different file)")]),e._v(" "),t("h3",{attrs:{id:"escaped-input-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escaped-input-values","aria-hidden":"true"}},[e._v("#")]),e._v(" Escaped input values")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("$_GET")]),e._v(", "),t("code",[e._v("$_POST")]),e._v(" are escaped by default, you can check "),t("code",[e._v("Util::cleanInput")]),e._v(" (system/engine/Util->cleanInput()) for more details")])])},[],!1,null,null,null);r.default=s.exports}}]);