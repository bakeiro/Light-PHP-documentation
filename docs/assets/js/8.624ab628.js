(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{208:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"more-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#more-info","aria-hidden":"true"}},[e._v("#")]),e._v(" ðŸ“œ More info")]),e._v(" "),t("h3",{attrs:{id:"log-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#log-files","aria-hidden":"true"}},[e._v("#")]),e._v(" Log files")]),e._v(" "),t("p",[e._v("All the warnings/errors stays in "),t("code",[e._v("system/logs")]),e._v(" in 2 files, "),t("code",[e._v("errors.log")]),e._v(" for errors and "),t("code",[e._v("notice.log")]),e._v(" for warnings and errors, the function triggered when a exception happens it's in "),t("code",[e._v("system/engine/Errors.php")])]),e._v(" "),t("h3",{attrs:{id:"debug-whoops"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debug-whoops","aria-hidden":"true"}},[e._v("#")]),e._v(" Debug whoops")]),e._v(" "),t("p",[e._v("Enabling this setting will launch the whoop debug info page anytime an exception happens")]),e._v(" "),t("h3",{attrs:{id:"composer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composer","aria-hidden":"true"}},[e._v("#")]),e._v(" Composer")]),e._v(" "),t("p",[e._v("Composer it's integrated in this framework, it only load the used libraries since uses autoload.")]),e._v(" "),t("h3",{attrs:{id:"npm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm","aria-hidden":"true"}},[e._v("#")]),e._v(" NPM")]),e._v(" "),t("p",[e._v("This framework it's also integrated with npm")]),e._v(" "),t("h3",{attrs:{id:"upload-folder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upload-folder","aria-hidden":"true"}},[e._v("#")]),e._v(" Upload folder")]),e._v(" "),t("p",[e._v("The upload folder it's located in "),t("code",[e._v("system/upload")]),e._v(" it's designed for uploading files, (by default, can't execute scripts from outside stored here)")]),e._v(" "),t("h3",{attrs:{id:"engine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#engine","aria-hidden":"true"}},[e._v("#")]),e._v(" Engine")]),e._v(" "),t("p",[e._v("In the folder "),t("code",[e._v("system/engine")]),e._v(" you can see the framework "),t("router-link",{attrs:{to:"/advanced/Engine.html"}},[e._v("engine")])],1),e._v(" "),t("h3",{attrs:{id:"useful-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useful-functions","aria-hidden":"true"}},[e._v("#")]),e._v(" Useful functions")]),e._v(" "),t("p",[e._v("You can use the functions inside engine/Util to do some common operation, examples are isSjaxRequest, sanitizeText, escape, generateSimpleToken, generateCSRFToken and so on")]),e._v(" "),t("h3",{attrs:{id:"compressed-resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compressed-resources","aria-hidden":"true"}},[e._v("#")]),e._v(" Compressed resources")]),e._v(" "),t("p",[e._v("All the HTML, CSS, JavaScript, Text, XML and fonts resources are compressed (gzip) by default, this is done using the "),t("code",[e._v(".htaccess")]),e._v(" file")]),e._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[e._v("#")]),e._v(" Cache control")]),e._v(" "),t("p",[e._v("You can define a version number for the "),t("code",[e._v("JS/CSS")]),e._v(" resources, so, every time you make an update you just change the cache number, and the user's browser will make a fresh download of these resources.\n(Basically, all the resources ends with "),t("code",[e._v("?v={%cache_number}")]),e._v(", changing this number makes the browser think it needs to download a different file)")]),e._v(" "),t("h3",{attrs:{id:"escaped-input-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escaped-input-values","aria-hidden":"true"}},[e._v("#")]),e._v(" Escaped input values")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("$_GET")]),e._v(", "),t("code",[e._v("$_POST")]),e._v(" are escaped by default, you can check "),t("code",[e._v("Util::cleanInput")]),e._v(" (system/engine/Util->cleanInput()) for more details")]),e._v(" "),t("h3",{attrs:{id:"security-implementations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#security-implementations","aria-hidden":"true"}},[e._v("#")]),e._v(" Security implementations:")]),e._v(" "),t("ul",[t("li",[e._v("Session id fixation")]),e._v(" "),t("li",[e._v("Session hijacking")]),e._v(" "),t("li",[e._v("Xss attacks")]),e._v(" "),t("li",[e._v("SQL injections")]),e._v(" "),t("li",[e._v("Can't exec scripts outside the framework")]),e._v(" "),t("li",[e._v("Only the JS/CSS/Images resources are accesible from outside")]),e._v(" "),t("li",[e._v("Pass encryption in the Database")]),e._v(" "),t("li",[e._v("Session data encryption")]),e._v(" "),t("li",[e._v("CSRF token [You need to disable 'allow_forms_without_csrf_token' in the config file and implement manually the CSRF token in every form, you can use Session::get(\"CSRF_input\")")]),e._v(" "),t("li",[e._v("Easily enable/disable debug info (for disabling this in production environments)")])]),e._v(" "),t("h1",{attrs:{id:"roadmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#roadmap","aria-hidden":"true"}},[e._v("#")]),e._v(" Roadmap")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/bakeiro/Light-PHP/projects",target:"_blank",rel:"noopener noreferrer"}},[e._v("Roadmap"),t("OutboundLink")],1)])])},[],!1,null,null,null);a.default=r.exports}}]);